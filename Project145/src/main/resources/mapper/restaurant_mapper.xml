<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.pj.vegi.restaurant.mapper.RestaurantMapper">

	<select id="bizCheckList" resultType="RestaurantVo">
		SELECT
		*
		FROM restaurant
		WHERE rest_name = #{restName}
	</select>


	<insert id="restInsert">
		<!-- 일반유저 식당 등록 -->
		<selectKey keyProperty="restId" resultType="string"
			order="BEFORE">
			SELECT 'rest'||rest_seq.nextval
			FROM DUAL
		</selectKey>
		INSERT INTO restaurant(REST_ID, REST_NAME,
		REST_STAR_AVG,REST_REVIEW_COUNT,
		REST_ADDRESS,REST_PIC,REST_TIME,M_ID,REST_RESERV_WAIT,
		REST_RESERV_ACCEPT,REST_TEL,BIZNUM,ADMIN_CONFIRM, REST_ADDRESS_DETAIL)
		VALUES(#{restId},#{restName},0,0,
		#{restAddress},#{restPic},#{restTime},#{mId},0,
		0,#{restTel},'','false', #{restAddressDetail})
	</insert>

	<insert id="menuInsert">
		<!-- 일반유저 식당 등록(메뉴) -->
		INSERT INTO REST_MENU(MENU_ID, MENU_NAME, MENU_VEGE_TYPE, MENU_PRICE,
		REST_ID)
		VALUES('menu' ||menu_seq.nextval, #{menuName},
		#{menuVegeType}, #{menuPrice},
		#{restId})
	</insert>


	<insert id="restInsertNull">
		INSERT INTO restaurant (REST_ID, REST_NAME,
		REST_STAR_AVG,REST_REVIEW_COUNT,
		REST_ADDRESS,REST_PIC,REST_TIME,M_ID,REST_RESERV_WAIT,
		REST_RESERV_ACCEPT,REST_TEL,BIZNUM,ADMIN_CONFIRM)
		VALUES('rest'||rest_seq.nextval,#{restName},0,0,#{restAddress},'','','',0,0,#{restTel},#{bizNum},'false')
	</insert>


	<select id="restNameSerchList" resultType="RestaurantVo">
		<!-- 일반유저 식당 등록에서 식당이름 검색하는 부분 -->
		SELECT REST_NAME, REST_ID FROM restaurant WHERE REST_NAME LIKE
		'%${restName}%'
	</select>


	<update id="restUpdate">
		Update restaurant
		set bizNum=#{bizNum}
		where rest_id =
		#{restId}
	</update>


	<update id="bizInfoUpdate">
		Update restaurant set bizNum=#{bizNum} where rest_id
		= #{restId}
	</update>


	<select id="getRestaurantList" resultType="RestaurantVo">
		<!-- 식당 전체목록, 검색, 페이징 -->
		SELECT a.*
		FROM ( SELECT b.*, ROWNUM rn
		FROM
		(SELECT *
		FROM RESTAURANT
		where ADMIN_CONFIRM = 'true'
		<if test="keyword != null and keyword != '' ">
			AND LOWER(rest_name) like LOWER('%' || #{keyword} || '%')
		</if>
		<if test=" menuVegeType != null and menuVegeType != '' ">
			AND rest_id IN (SELECT rest_id FROM rest_menu WHERE menu_Vege_Type = #{menuVegeType})
		</if>
		) b
		) a
		WHERE rn BETWEEN #{start } AND #{end }
	</select>


	<select id="countRestaurantList" resultType="Integer">
		<!-- 식당 페이지 카운트 하는 부분 -->
		select count(*)
		from restaurant
		where ADMIN_CONFIRM = 'true'
		<if test="keyword != null and keyword != '' ">
			AND LOWER(rest_name) like LOWER('%' || #{keyword} || '%')
		</if>
		<if test=" menuVegeType != null and menuVegeType != '' ">
			AND rest_id IN (SELECT rest_id FROM rest_menu WHERE menu_Vege_Type = #{menuVegeType})
		</if>
	</select>




	<select id="getRestaurantDetail" resultType="RestaurantVo">
		<!-- 식당 상세페이지 -->
		SELECT *
		FROM RESTAURANT
		WHERE REST_ID = #{restId}
	</select>

	<select id="getRestaurantMenu" resultType="RestMenuVo">
		<!-- 식당 메뉴 목록 -->
		SELECT *
		FROM REST_MENU
		WHERE REST_ID = #{restId}
	</select>

	<insert id="reservInsert">
		<!-- 예약하기 -->
		insert into REST_RESERV(REST_RESERV_NUM, REST_RESERV_DATE,
		REST_RESERV_NAME, REST_RESERV_PEOPLE, M_ID, REST_ID)
		values('rest_reserv'||rest_reserv_seq.nextval, #{restReservDate},
		#{restReservName}, #{restReservPeople}, #{mId}, #{restId})
	</insert>

	<insert id="restLikeInsert">
		INSERT INTO like_list
		VALUES('like' ||
		like_seq.nextval, #{originId}, current_date, #{mId})
	</insert>

	<delete id="restLikeDelete">
		DELETE FROM like_list
		WHERE origin_id=#{originId}
		AND
		m_id=#{mId}
	</delete>

	<select id="restLikeFlagSelect" resultType="int">
		SELECT COUNT(*)
		FROM
		like_list
		WHERE m_id=#{mId}
		AND origin_id=#{originId}
	</select>
	
	
	<select id="restReview" resultType="RestReviewVo">
	<!-- 식당 상세에서 리뷰 목록 -->	
		SELECT a.*
		FROM ( SELECT b.*, ROWNUM rn
		FROM
		(SELECT r.*,  m.m_name, m.profile_image
		FROM REST_REVIEW r join member m
		ON (r.m_id = m.m_id)
		WHERE r.rest_id = #{restId}
		ORdER BY review_Date
		) b
		) a
		WHERE rn BETWEEN #{start } AND #{end }
	</select>
	
	<select id="countRestReview" resultType="int">
	<!-- 식당 상세에서 리뷰 목록 카운트!!!! -->	
		SELECT count(*)
		FROM REST_REVIEW r join member m
		ON (r.m_id = m.m_id)
		WHERE r.rest_id = #{restId}
		ORdER BY review_Date
	</select>
	
	<insert id="restReviewInsert"> 
	<!-- 리뷰 입력 -->
		INSERT INTO rest_review(rest_review_id, rest_review, rest_star, review_pic, review_date, M_id, rest_id)
		VALUES('rest_review'||rest_review_seq.nextval, #{restReview}, #{restStar}, null, sysdate, #{mId}, #{restId} )
	</insert>
	
	<delete id="restReviewDelete">
	<!-- 리뷰 삭제 -->
		DELETE FROM rest_review WHERE rest_review_id = #{restReviewId}
	</delete>

	<update id="reservCountUp">
		UPDATE restaurant
		SET rest_reserv_wait = rest_reserv_wait + 1
		WHERE rest_id = #{restId}
	</update>
</mapper>